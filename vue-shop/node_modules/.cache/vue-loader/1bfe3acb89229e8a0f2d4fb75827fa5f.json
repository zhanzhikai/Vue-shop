{"remainingRequest":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/src/components/user/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/src/components/user/index.vue","mtime":1563892409005},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/cache-loader/dist/cjs.js","mtime":1564022614767},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/babel-loader/lib/index.js","mtime":1564022599683},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/cache-loader/dist/cjs.js","mtime":1564022614767},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/vue-loader/lib/index.js","mtime":1564022615698}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data() {\n    // 验证邮箱的规则\n    var checkEmail = (rule, value, cb) => {\n      // 验证邮箱的正则表达式\n      const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/\n\n      if (regEmail.test(value)) {\n        // 合法的邮箱\n        return cb()\n      }\n\n      cb(new Error('请输入合法的邮箱'))\n    }\n\n    // 验证手机号的规则\n    var checkMobile = (rule, value, cb) => {\n      // 验证手机号的正则表达式\n      const regMobile = /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/\n\n      if (regMobile.test(value)) {\n        return cb()\n      }\n\n      cb(new Error('请输入合法的手机号'))\n    }\n\n    return {\n      // 获取用户列表的参数对象\n      queryInfo: {\n        query: '',\n        // 当前的页数\n        pagenum: 1,\n        // 当前每页显示多少条数据\n        pagesize: 2\n      },\n      userlist: [],\n      total: 0,\n      addDialogVisible: false,\n      // 添加用户的表单数据\n      addForm: {\n        username: '',\n        password: '',\n        email: '',\n        mobile: ''\n      },\n      // 添加表单的验证规则对象\n      addFormRules: {\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' },\n          {\n            min: 3,\n            max: 10,\n            message: '用户名的长度在3~10个字符之间',\n            trigger: 'blur'\n          }\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' },\n          {\n            min: 6,\n            max: 15,\n            message: '用户名的长度在6~15个字符之间',\n            trigger: 'blur'\n          }\n        ],\n        email: [\n          { required: true, message: '请输入邮箱', trigger: 'blur' },\n          { validator: checkEmail, trigger: 'blur' }\n        ],\n        mobile: [\n          { required: true, message: '请输入手机号', trigger: 'blur' },\n          { validator: checkMobile, trigger: 'blur' }\n        ]\n      },\n      // 控制修改用户对话框的显示与隐藏\n      editDialogVisible: false,\n      // 查询到的用户信息对象\n      editForm: {},\n      // 修改表单的验证规则对象\n      editFormRules: {\n        email: [\n          { required: true, message: '请输入用户邮箱', trigger: 'blur' },\n          { validator: checkEmail, trigger: 'blur' }\n        ],\n        mobile: [\n          { required: true, message: '请输入用户手机', trigger: 'blur' },\n          { validator: checkMobile, trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  created() {\n    this.getUsers()\n  },\n  methods: {\n    async getUsers() {\n      const {\n        data: { data, meta }\n      } = await this.$http.get('users', { params: this.queryInfo })\n      if (meta.status !== 200) return this.$message.error(meta.msg)\n      this.userlist = data.users\n      this.total = data.total\n      // console.log(data);\n    },\n    // 监听 pagesize 改变的事件\n    handleSizeChange(newSize) {\n      this.queryInfo.pagesize = newSize\n      this.getUsers()\n    },\n    // 监听 页码值 改变的事件\n    handleCurrentChange(newPage) {\n      this.queryInfo.pagenum = newPage\n      this.getUsers()\n    },\n    async userStateChanged(userinfor) {\n      const {\n        data: { data, meta }\n      } = await this.$http.put(\n        `users/${userinfor.id}/state/${userinfor.mg_state}`\n      )\n      if (meta.status !== 200) {\n        userinfor.mg_state = !userinfor.mg_state\n        return this.$message.error(meta.msg)\n      }\n      this.$message.success(meta.msg)\n    },\n    // 监听添加用户对话框的关闭事件\n    clearDialogClosed() {\n      this.$refs.addFormRef.resetFields()\n    },\n    // 点击按钮，添加新用户\n    addUser() {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) return\n        // 可以发起添加用户的网络请求\n        const { data: res } = await this.$http.post('users', this.addForm)\n\n        if (res.meta.status !== 201) {\n          this.$message.error('添加用户失败！')\n        }\n\n        this.$message.success('添加用户成功！')\n        // 隐藏添加用户的对话框\n        this.addDialogVisible = false\n        // 重新获取用户列表数据\n        this.getUsers()\n      })\n    },\n    // 展示编辑用户的对话框\n    async showEditDialog(id) {\n      console.log(id)\n      const { data: res } = await this.$http.get('users/' + id)\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('查询用户信息失败！')\n      }\n\n      this.editForm = res.data\n      this.editDialogVisible = true\n    },\n    // 监听修改用户对话框的关闭事件\n    editDialogClosed() {\n      this.$refs.editFormRef.resetFields()\n    },\n\n    editUserInfo() {\n      this.$refs.editFormRef.validate(async valid => {\n        if (!valid) return\n        // 发起修改用户信息的数据请求\n        const { data: res } = await this.$http.put(\n          'users/' + this.editForm.id,\n          {\n            email: this.editForm.email,\n            mobile: this.editForm.mobile\n          }\n        )\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('更新用户信息失败！')\n        }\n\n        // 关闭对话框\n        this.editDialogVisible = false\n        // 刷新数据列表\n        this.getUsers()\n        // 提示修改成功\n        this.$message.success('更新用户信息成功！')\n      })\n    },\n    // 根据Id删除对应的用户信息\n    async removeUserById(id) {\n      try {\n        // 如果用户确认删除，则返回值为字符串 confirm\n        // 如果用户取消了删除，则返回值为字符串 cancel\n        // console.log(confirmResult)\n        await this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        })\n        const { data: res } = await this.$http.delete('users/' + id)\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('删除用户失败！')\n        }\n         // 刷新数据列表\n        this.getUsers()\n        \n        this.$message.success('删除用户成功！')\n       \n      } catch (err) {\n        this.$message.info('已经撤销删除')\n      }\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/user","sourcesContent":["<template>\n  <div class=\"users\">\n    <!-- 面包屑导航区域 -->\n    <el-breadcrumb separator=\"/\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>用户管理</el-breadcrumb-item>\n      <el-breadcrumb-item>用户列表</el-breadcrumb-item>\n    </el-breadcrumb>\n    <!-- 卡片视图区域 -->\n\n    <el-card>\n      <!-- 搜索与添加区域 -->\n      <el-row :gutter=\"20\">\n        <el-col :span=\"10\">\n          <el-input placeholder=\"请输入内容\" v-model=\"queryInfo.query\" clearable @clear=\"getUsers\">\n            <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"getUsers\"></el-button>\n          </el-input>\n        </el-col>\n        <el-col :span=\"4\">\n          <el-button type=\"primary\" @click=\"addDialogVisible=true\">添加用户</el-button>\n        </el-col>\n      </el-row>\n\n      <!-- 用户列表区域 -->\n      <el-table :data=\"userlist\" border>\n        <el-table-column type=\"index\"></el-table-column>\n        <el-table-column label=\"姓名\" prop=\"username\"></el-table-column>\n        <el-table-column label=\"邮箱\" prop=\"email\"></el-table-column>\n        <el-table-column label=\"电话\" prop=\"mobile\"></el-table-column>\n        <el-table-column label=\"角色\" prop=\"role_name\"></el-table-column>\n        <el-table-column label=\"状态\">\n          <template slot-scope=\"scope\">\n            <el-switch v-model=\"scope.row.mg_state\" @change=\"userStateChanged(scope.row)\"></el-switch>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"180px\">\n          <template slot-scope=\"scope\">\n            <!-- 修改按钮 -->\n            <el-button\n              type=\"primary\"\n              icon=\"el-icon-edit\"\n              size=\"mini\"\n              @click=\"showEditDialog(scope.row.id)\"\n            ></el-button>\n            <!-- 删除按钮 -->\n            <el-button\n              type=\"danger\"\n              icon=\"el-icon-delete\"\n              size=\"mini\"\n              @click=\"removeUserById(scope.row.id)\"\n            ></el-button>\n            <!-- 分配角色按钮 -->\n            <el-tooltip effect=\"dark\" content=\"分配角色\" placement=\"top\" :enterable=\"false\">\n              <el-button type=\"warning\" icon=\"el-icon-setting\" size=\"mini\"></el-button>\n            </el-tooltip>\n          </template>\n        </el-table-column>\n      </el-table>\n      <!-- 分页区域 -->\n      <el-pagination\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n        :current-page=\"queryInfo.pagenum\"\n        :page-sizes=\"[1, 2, 5, 10]\"\n        :page-size=\"queryInfo.pagesize\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"total\"\n      ></el-pagination>\n\n      <el-dialog\n        title=\"添加用户\"\n        :visible.sync=\"addDialogVisible\"\n        width=\"50%\"\n        @close=\"clearDialogClosed\"\n      >\n        <!-- 内容主体区域 -->\n        <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"70px\">\n          <el-form-item label=\"用户名\" prop=\"username\">\n            <el-input v-model=\"addForm.username\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"密码\" prop=\"password\">\n            <el-input v-model=\"addForm.password\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"邮箱\" prop=\"email\">\n            <el-input v-model=\"addForm.email\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"手机\" prop=\"mobile\">\n            <el-input v-model=\"addForm.mobile\" maxlength=\"11\"></el-input>\n          </el-form-item>\n        </el-form>\n        <!-- 底部区域 -->\n        <span slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"addDialogVisible = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"addUser\">确 定</el-button>\n        </span>\n      </el-dialog>\n      <!-- 修改用户的对话框 -->\n      <el-dialog\n        title=\"修改用户\"\n        :visible.sync=\"editDialogVisible\"\n        width=\"50%\"\n        @close=\"editDialogClosed\"\n      >\n        <!-- 内容主体区域 -->\n        <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editFormRef\" label-width=\"70px\">\n          <el-form-item label=\"用户名\" prop=\"username\">\n            <el-input v-model=\"editForm.username\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"邮箱\" prop=\"email\">\n            <el-input v-model=\"editForm.email\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"手机\" prop=\"mobile\">\n            <el-input v-model=\"editForm.mobile\" maxlength=\"11\"></el-input>\n          </el-form-item>\n        </el-form>\n        <!-- 底部区域 -->\n        <span slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"editDialogVisible = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"editUserInfo\">确 定</el-button>\n        </span>\n      </el-dialog>\n    </el-card>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    // 验证邮箱的规则\n    var checkEmail = (rule, value, cb) => {\n      // 验证邮箱的正则表达式\n      const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/\n\n      if (regEmail.test(value)) {\n        // 合法的邮箱\n        return cb()\n      }\n\n      cb(new Error('请输入合法的邮箱'))\n    }\n\n    // 验证手机号的规则\n    var checkMobile = (rule, value, cb) => {\n      // 验证手机号的正则表达式\n      const regMobile = /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/\n\n      if (regMobile.test(value)) {\n        return cb()\n      }\n\n      cb(new Error('请输入合法的手机号'))\n    }\n\n    return {\n      // 获取用户列表的参数对象\n      queryInfo: {\n        query: '',\n        // 当前的页数\n        pagenum: 1,\n        // 当前每页显示多少条数据\n        pagesize: 2\n      },\n      userlist: [],\n      total: 0,\n      addDialogVisible: false,\n      // 添加用户的表单数据\n      addForm: {\n        username: '',\n        password: '',\n        email: '',\n        mobile: ''\n      },\n      // 添加表单的验证规则对象\n      addFormRules: {\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'blur' },\n          {\n            min: 3,\n            max: 10,\n            message: '用户名的长度在3~10个字符之间',\n            trigger: 'blur'\n          }\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'blur' },\n          {\n            min: 6,\n            max: 15,\n            message: '用户名的长度在6~15个字符之间',\n            trigger: 'blur'\n          }\n        ],\n        email: [\n          { required: true, message: '请输入邮箱', trigger: 'blur' },\n          { validator: checkEmail, trigger: 'blur' }\n        ],\n        mobile: [\n          { required: true, message: '请输入手机号', trigger: 'blur' },\n          { validator: checkMobile, trigger: 'blur' }\n        ]\n      },\n      // 控制修改用户对话框的显示与隐藏\n      editDialogVisible: false,\n      // 查询到的用户信息对象\n      editForm: {},\n      // 修改表单的验证规则对象\n      editFormRules: {\n        email: [\n          { required: true, message: '请输入用户邮箱', trigger: 'blur' },\n          { validator: checkEmail, trigger: 'blur' }\n        ],\n        mobile: [\n          { required: true, message: '请输入用户手机', trigger: 'blur' },\n          { validator: checkMobile, trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  created() {\n    this.getUsers()\n  },\n  methods: {\n    async getUsers() {\n      const {\n        data: { data, meta }\n      } = await this.$http.get('users', { params: this.queryInfo })\n      if (meta.status !== 200) return this.$message.error(meta.msg)\n      this.userlist = data.users\n      this.total = data.total\n      // console.log(data);\n    },\n    // 监听 pagesize 改变的事件\n    handleSizeChange(newSize) {\n      this.queryInfo.pagesize = newSize\n      this.getUsers()\n    },\n    // 监听 页码值 改变的事件\n    handleCurrentChange(newPage) {\n      this.queryInfo.pagenum = newPage\n      this.getUsers()\n    },\n    async userStateChanged(userinfor) {\n      const {\n        data: { data, meta }\n      } = await this.$http.put(\n        `users/${userinfor.id}/state/${userinfor.mg_state}`\n      )\n      if (meta.status !== 200) {\n        userinfor.mg_state = !userinfor.mg_state\n        return this.$message.error(meta.msg)\n      }\n      this.$message.success(meta.msg)\n    },\n    // 监听添加用户对话框的关闭事件\n    clearDialogClosed() {\n      this.$refs.addFormRef.resetFields()\n    },\n    // 点击按钮，添加新用户\n    addUser() {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) return\n        // 可以发起添加用户的网络请求\n        const { data: res } = await this.$http.post('users', this.addForm)\n\n        if (res.meta.status !== 201) {\n          this.$message.error('添加用户失败！')\n        }\n\n        this.$message.success('添加用户成功！')\n        // 隐藏添加用户的对话框\n        this.addDialogVisible = false\n        // 重新获取用户列表数据\n        this.getUsers()\n      })\n    },\n    // 展示编辑用户的对话框\n    async showEditDialog(id) {\n      console.log(id)\n      const { data: res } = await this.$http.get('users/' + id)\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('查询用户信息失败！')\n      }\n\n      this.editForm = res.data\n      this.editDialogVisible = true\n    },\n    // 监听修改用户对话框的关闭事件\n    editDialogClosed() {\n      this.$refs.editFormRef.resetFields()\n    },\n\n    editUserInfo() {\n      this.$refs.editFormRef.validate(async valid => {\n        if (!valid) return\n        // 发起修改用户信息的数据请求\n        const { data: res } = await this.$http.put(\n          'users/' + this.editForm.id,\n          {\n            email: this.editForm.email,\n            mobile: this.editForm.mobile\n          }\n        )\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('更新用户信息失败！')\n        }\n\n        // 关闭对话框\n        this.editDialogVisible = false\n        // 刷新数据列表\n        this.getUsers()\n        // 提示修改成功\n        this.$message.success('更新用户信息成功！')\n      })\n    },\n    // 根据Id删除对应的用户信息\n    async removeUserById(id) {\n      try {\n        // 如果用户确认删除，则返回值为字符串 confirm\n        // 如果用户取消了删除，则返回值为字符串 cancel\n        // console.log(confirmResult)\n        await this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        })\n        const { data: res } = await this.$http.delete('users/' + id)\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('删除用户失败！')\n        }\n         // 刷新数据列表\n        this.getUsers()\n        \n        this.$message.success('删除用户成功！')\n       \n      } catch (err) {\n        this.$message.info('已经撤销删除')\n      }\n    }\n  }\n}\n</script lang=\"less\"scoped>\n<style >\n</style>"]}]}