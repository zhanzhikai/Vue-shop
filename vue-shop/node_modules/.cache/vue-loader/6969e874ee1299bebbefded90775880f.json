{"remainingRequest":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/src/components/goods/Add.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/src/components/goods/Add.vue","mtime":1564037051993},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/css-loader/index.js","mtime":1564022615061},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1564022615698},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/postcss-loader/src/index.js","mtime":1564022615590},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/cache-loader/dist/cjs.js","mtime":1564022614767},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/vue-loader/lib/index.js","mtime":1564022615698}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.el-checkbox {\n  margin: 0 10px 0 0 !important;\n}\n.previewImg {\n  width: 100%;\n}\n\n.btnAdd {\n  margin-top: 15px;\n}\n",{"version":3,"sources":["Add.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAySA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Add.vue","sourceRoot":"src/components/goods","sourcesContent":["<template>\n  <div class=\"add\">\n    <!-- 面包屑导航区域 -->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\n      <el-breadcrumb-item>添加商品</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!-- 卡片视图 -->\n    <el-card>\n      <!-- 提示区域 -->\n      <el-alert title=\"添加商品信息\" type=\"info\" center show-icon :closable=\"false\"></el-alert>\n      <!-- 步骤条区域   :active=\"activeIndex - 0\" -->\n      <el-steps :space=\"200\" finish-status=\"success\" :active=\"activeIndex - 0\" align-center>\n        <el-step title=\"基本信息\"></el-step>\n        <el-step title=\"商品参数\"></el-step>\n        <el-step title=\"商品属性\"></el-step>\n        <el-step title=\"商品图片\"></el-step>\n        <el-step title=\"商品内容\"></el-step>\n        <el-step title=\"完成\"></el-step>\n      </el-steps>\n      <!-- tab栏区域 -->\n\n      <el-form\n        :model=\"addForm\"\n        :rules=\"addFormRules\"\n        ref=\"addFormRef\"\n        label-width=\"100px\"\n        label-position=\"top\"\n      >\n        <el-tabs\n          v-model=\"activeIndex\"\n          :tab-position=\"'left'\"\n          :before-leave=\"beforeTabLeave\"\n          @tab-click=\"tabClicked\"\n        >\n          <el-tab-pane label=\"基本信息\" name=\"0\">\n            <el-form-item label=\"商品名称\" prop=\"goods_name\">\n              <el-input v-model=\"addForm.goods_name\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品价格\" prop=\"goods_price\">\n              <el-input v-model=\"addForm.goods_price\" type=\"number\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品重量\" prop=\"goods_weight\">\n              <el-input v-model=\"addForm.goods_weight\" type=\"number\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品数量\" prop=\"goods_number\">\n              <el-input v-model=\"addForm.goods_number\" type=\"number\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"商品分类\" prop=\"goods_cat\">\n              <el-cascader\n                expand-trigger=\"hover\"\n                :options=\"catelist\"\n                :props=\"cateProps\"\n                v-model=\"addForm.goods_cat\"\n                @change=\"handleChange\"\n              ></el-cascader>\n            </el-form-item>\n          </el-tab-pane>\n          <el-tab-pane label=\"商品参数\" name=\"1\">\n            <!-- 渲染表单的Item项 -->\n            <el-form-item :label=\"item.attr_name\" v-for=\"item in manyTableData\" :key=\"item.attr_id\">\n              <!-- 复选框组 -->\n              <el-checkbox-group v-model=\"item.attr_vals\">\n                <el-checkbox :label=\"cb\" v-for=\"(cb, i) in item.attr_vals\" :key=\"i\" border></el-checkbox>\n              </el-checkbox-group>\n            </el-form-item>\n          </el-tab-pane>\n          <el-tab-pane label=\"商品属性\" name=\"2\">\n            <el-form-item :label=\"item.attr_name\" v-for=\"item in onlyTableData\" :key=\"item.attr_id\">\n              <el-input v-model=\"item.attr_vals\"></el-input>\n            </el-form-item>\n          </el-tab-pane>\n          <el-tab-pane label=\"商品图片\" name=\"3\">商品图片</el-tab-pane>\n          <!-- action 表示图片要上传到的后台API地址 -->\n          <el-upload\n            :action=\"uploadURL\"\n            :on-preview=\"handlePreview\"\n            :on-remove=\"handleRemove\"\n            list-type=\"picture\"\n            :headers=\"headerObj\"\n            :on-success=\"handleSuccess\"\n          >\n            <el-button size=\"small\" type=\"primary\">点击上传</el-button>\n          </el-upload>\n          <el-tab-pane label=\"商品内容\" name=\"4\">商品内容\n                        <!-- 富文本编辑器组件 -->\n            <quill-editor v-model=\"addForm.goods_introduce\"></quill-editor>\n                        <!-- 添加商品的按钮 -->\n            <el-button type=\"primary\" class=\"btnAdd\" @click=\"add\">添加商品</el-button>\n          </el-tab-pane>\n        </el-tabs>\n      </el-form>\n    </el-card>\n        <!-- 图片预览 -->\n    <el-dialog title=\"图片预览\" :visible.sync=\"previewVisible\" width=\"50%\">\n      <img :src=\"previewPath\" alt=\"\" class=\"previewImg\">\n    </el-dialog>\n  </div>\n</template>\n<script>\nimport _ from 'lodash'\nexport default {\n  data: () => ({\n    activeIndex: 0,\n    // 添加商品的表单数据对象\n    addForm: {\n      goods_name: '',\n      goods_price: '',\n      goods_weight: '',\n      goods_number: '',\n      // 商品所属的分类数组\n      goods_cat: [],\n      // 图片的数组\n      pics: [],\n            // 商品的详情描述\n        goods_introduce: '',\n        attrs: []\n\n    },\n    addFormRules: {\n      goods_name: [\n        { required: true, message: '请输入商品名称', trigger: 'blur' }\n      ],\n      goods_price: [\n        { required: true, message: '请输入商品价格', trigger: 'blur' }\n      ],\n      goods_weight: [\n        { required: true, message: '请输入商品重量', trigger: 'blur' }\n      ],\n      goods_number: [\n        { required: true, message: '请输入商品数量', trigger: 'blur' }\n      ],\n      goods_cat: [\n        { required: true, message: '请选择商品分类', trigger: 'blur' }\n      ]\n    },\n    // 商品分类列表\n    catelist: [],\n    cateProps: {\n      label: 'cat_name',\n      value: 'cat_id',\n      children: 'children'\n    },\n    // 动态参数列表数据\n    manyTableData: [],\n    // 静态属性列表数据\n    onlyTableData: [],\n    // 上传图片的URL地址\n    uploadURL: 'http://127.0.0.1:8888/api/private/v1/upload',\n    // 图片上传组件的headers请求头对象\n    headerObj: {\n      Authorization: window.sessionStorage.getItem('token')\n    },\n    // 图片的路径\n    previewPath: '',\n    //图片预览窗口\n    previewVisible: false\n  }),\n  created() {\n    this.getCateList()\n  },\n  methods: {\n    // 获取所有商品分类数据\n    async getCateList() {\n      const { data: res } = await this.$http.get('categories')\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取商品分类数据失败！')\n      }\n\n      this.catelist = res.data\n      console.log(this.catelist)\n    },\n    handleChange() {\n      console.log(this.addForm.goods_cat)\n      if (this.addForm.goods_cat.length !== 3) {\n        this.addForm.goods_cat = []\n      }\n    },\n    beforeTabLeave(activeName, oldActiveName) {\n      // console.log('即将离开的标签页名字是：' + oldActiveName)\n      // console.log('即将进入的标签页名字是：' + activeName)\n      // return false\n      if (oldActiveName === '0' && this.addForm.goods_cat.length !== 3) {\n        this.$message.error('请先选择商品分类！')\n        return false\n      }\n    },\n    async tabClicked() {\n      // console.log(this.activeIndex)\n      // 证明访问的是动态参数面板\n      if (this.activeIndex === '1') {\n        const { data: res } = await this.$http.get(\n          `categories/${this.cateId}/attributes`,\n          {\n            params: { sel: 'many' }\n          }\n        )\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('获取动态参数列表失败！')\n        }\n\n        console.log(res.data)\n        res.data.forEach(item => {\n          item.attr_vals =\n            item.attr_vals.length === 0 ? [] : item.attr_vals.split(' ')\n        })\n        this.manyTableData = res.data\n      } else if (this.activeIndex === '2') {\n        const { data: res } = await this.$http.get(\n          `categories/${this.cateId}/attributes`,\n          {\n            params: { sel: 'only' }\n          }\n        )\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('获取静态属性失败！')\n        }\n\n        console.log(res.data)\n        this.onlyTableData = res.data\n      }\n    },\n    // 处理图片预览效果\n    handlePreview(file) {\n      console.log(file)\n      this.previewPath = file.response.data.url\n      this.previewVisible = true\n    },\n    // 处理移除图片的操作\n    handleRemove(file) {\n      // 1. 获取将要删除的图片的临时路径\n      const filePath = file.response.data.tmp_path\n      // 2. 从 pics 数组中，找到这个图片对应的索引值\n      const i = this.addForm.pics.findIndex(x => x.pic === filePath)\n      // 3. 调用数组的 splice 方法，把图片信息对象，从 pics 数组中移除\n      this.addForm.pics.splice(i, 1)\n    },\n    // 监听图片上传成功的事件\n    handleSuccess(res) {\n      this.addForm.pics.push({ pic: res.data.tmp_path })\n    },\n        // 添加商品\n    add() {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) {\n          return this.$message.error('请填写必要的表单项！')\n        }\n        // 执行添加的业务逻辑\n        // lodash   cloneDeep(obj)\n        const form = _.cloneDeep(this.addForm)\n        form.goods_cat = form.goods_cat.join(',')\n        // 处理动态参数\n        this.manyTableData.forEach(item => {\n          const newInfo = {\n            attr_id: item.attr_id,\n            attr_value: item.attr_vals.join(' ')\n          }\n          this.addForm.attrs.push(newInfo)\n        })\n        // 处理静态属性\n        this.onlyTableData.forEach(item => {\n          const newInfo = { attr_id: item.attr_id, attr_value: item.attr_vals }\n          this.addForm.attrs.push(newInfo)\n        })\n        form.attrs = this.addForm.attrs\n        console.log(form)\n\n        // 发起请求添加商品\n        // 商品的名称，必须是唯一的\n        const { data: res } = await this.$http.post('goods', form)\n\n        if (res.meta.status !== 201) {\n          return this.$message.error('添加商品失败！')\n        }\n\n        this.$message.success('添加商品成功！')\n        this.$router.push('/goods')\n      })\n    }\n\n  },\n  computed: {\n    cateId() {\n      if (this.addForm.goods_cat.length === 3) {\n        return this.addForm.goods_cat[2]\n      }\n      return null\n    }\n  }\n}\n</script lang=\"less\"scoped>\n<style >\n.el-checkbox {\n  margin: 0 10px 0 0 !important;\n}\n.previewImg {\n  width: 100%;\n}\n\n.btnAdd {\n  margin-top: 15px;\n}\n</style>"]}]}