{"remainingRequest":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/babel-loader/lib/index.js!/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/src/components/goods/Cate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/src/components/goods/Cate.vue","mtime":1563966883975},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/cache-loader/dist/cjs.js","mtime":1564022614767},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/babel-loader/lib/index.js","mtime":1564022599683},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/cache-loader/dist/cjs.js","mtime":1564022614767},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/vue-loader/lib/index.js","mtime":1564022615698}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      // 查询条件\n      querInfo: {\n        type: 3,\n        pagenum: 1,\n        pagesize: 5\n      },\n      // 商品分类的数据列表，默认为空\n      catelist: [],\n      // 总数据条数\n      total: 0,\n      // 为table指定列的定义\n      columns: [{\n        label: '分类名称',\n        prop: 'cat_name'\n      }, {\n        label: '是否有效',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'isok'\n      }, {\n        label: '排序',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'order'\n      }, {\n        label: '操作',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'opt'\n      }],\n      // 控制添加分类对话框的显示与隐藏\n      addCateDialogVisible: false,\n      // 添加分类的表单数据对象\n      addCateForm: {\n        // 将要添加的分类的名称\n        cat_name: '',\n        // 父级分类的Id\n        cat_pid: 0,\n        // 分类的等级，默认要添加的是1级分类\n        cat_level: 0\n      },\n      addCateFormRules: {\n        cat_name: [{\n          required: true,\n          message: '请输入分类名称',\n          trigger: 'blur'\n        }]\n      },\n      // 父级分类的列表\n      parentCateList: [],\n      // 指定级联选择器的配置对象\n      cascaderProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children'\n      },\n      // 选中的父级分类的Id数组\n      selectedKeys: [],\n      // 编辑对话框的显示与隐藏\n      editCateDialogVisible: false,\n      // 修改表单数据对象\n      editCateForm: {},\n      // 修改标表单的验证规则\n      editCateFormRules: {\n        cat_name: [{\n          required: true,\n          message: '请输入分类名称',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getCateList();\n  },\n  methods: {\n    // 获取商品分类数据\n    getCateList: function () {\n      var _getCateList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _ref, _ref$data, data, meta;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.$http.get('categories', {\n                  params: this.querInfo\n                });\n\n              case 2:\n                _ref = _context.sent;\n                _ref$data = _ref.data;\n                data = _ref$data.data;\n                meta = _ref$data.meta;\n\n                if (!(meta.status !== 200)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.$message.error('获取商品分类失败！'));\n\n              case 8:\n                console.log(data); // 把数据列表，赋值给 catelist\n\n                this.catelist = data.result; // 为总数据条数赋值\n\n                this.total = data.total;\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCateList() {\n        return _getCateList.apply(this, arguments);\n      }\n\n      return getCateList;\n    }(),\n    // 监听 pagesize 改变\n    handleSizeChange: function handleSizeChange(newSize) {\n      this.querInfo.pagesize = newSize;\n      this.getCateList();\n    },\n    // 监听 pagenum 改变\n    handleCurrentChange: function handleCurrentChange(newPage) {\n      this.querInfo.pagenum = newPage;\n      this.getCateList();\n    },\n    // 点击按钮，展示添加分类的对话框\n    showAddCateDialog: function showAddCateDialog() {\n      // 先获取父级分类的数据列表\n      this.getParentCateList(); // 再展示出对话框\n\n      this.addCateDialogVisible = true;\n    },\n    // 获取父级分类的数据列表\n    getParentCateList: function () {\n      var _getParentCateList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _ref2, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.$http.get('categories', {\n                  params: {\n                    type: 2\n                  }\n                });\n\n              case 2:\n                _ref2 = _context2.sent;\n                res = _ref2.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.$message.error('获取父级分类数据失败！'));\n\n              case 6:\n                console.log(res.data);\n                this.parentCateList = res.data;\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getParentCateList() {\n        return _getParentCateList.apply(this, arguments);\n      }\n\n      return getParentCateList;\n    }(),\n    // 选择项发生变化触发这个函数\n    parentCateChanged: function parentCateChanged() {\n      console.log(this.selectedKeys); // 如果 selectedKeys 数组中的 length 大于0，证明选中的父级分类\n      // 反之，就说明没有选中任何父级分类\n\n      if (this.selectedKeys.length > 0) {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = this.selectedKeys[this.selectedKeys.length - 1]; // 为当前分类的等级赋值\n\n        this.addCateForm.cat_level = this.selectedKeys.length;\n        return;\n      } else {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = 0; // 为当前分类的等级赋值\n\n        this.addCateForm.cat_level = 0;\n      }\n    },\n    // 点击按钮，添加新的分类\n    addCate: function addCate() {\n      var _this = this;\n\n      this.$refs.addCateFormRef.validate(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(valid) {\n          var _ref4, res;\n\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (valid) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 2:\n                  _context3.next = 4;\n                  return _this.$http.post('categories', _this.addCateForm);\n\n                case 4:\n                  _ref4 = _context3.sent;\n                  res = _ref4.data;\n\n                  if (!(res.meta.status !== 201)) {\n                    _context3.next = 8;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\", _this.$message.error('添加分类失败！'));\n\n                case 8:\n                  _this.$message.success('添加分类成功！');\n\n                  _this.getCateList();\n\n                  _this.addCateDialogVisible = false;\n\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    },\n    // 监听对话框的关闭事件，重置表单数据\n    addCateDialogClosed: function addCateDialogClosed() {\n      this.$refs.addCateFormRef.resetFields();\n      this.selectedKeys = [];\n      this.addCateForm.cat_level = 0;\n      this.addCateForm.cat_pid = 0;\n    },\n    //点击编辑按钮修改对话框内容\n    showEditCateDialog: function () {\n      var _showEditCateDialog = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(id) {\n        var _ref5, res;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // 编辑当前参数的id\n                this.id = id;\n                _context4.next = 3;\n                return this.$http.get(\"categories/\".concat(id));\n\n              case 3:\n                _ref5 = _context4.sent;\n                res = _ref5.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", this.$message.error('获取参数信息失败！'));\n\n              case 7:\n                this.editCateForm = res.data;\n                this.editCateDialogVisible = true;\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function showEditCateDialog(_x2) {\n        return _showEditCateDialog.apply(this, arguments);\n      }\n\n      return showEditCateDialog;\n    }(),\n    // 重置修改的表单\n    editCateDialogClosed: function editCateDialogClosed() {\n      this.$refs.editCateFormRef.resetFields();\n    },\n    editCate: function editCate() {\n      var _this2 = this;\n\n      this.$refs.editCateFormRef.validate(\n      /*#__PURE__*/\n      function () {\n        var _ref6 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee5(valid) {\n          var _ref7, res;\n\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (valid) {\n                    _context5.next = 2;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\");\n\n                case 2:\n                  _context5.next = 4;\n                  return _this2.$http.put('categories/' + _this2.editCateForm.cat_id, _this2.editCateForm);\n\n                case 4:\n                  _ref7 = _context5.sent;\n                  res = _ref7.data;\n\n                  if (!(res.meta.status !== 200)) {\n                    _context5.next = 8;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\", _this2.$message.error('更新分类失败！'));\n\n                case 8:\n                  _this2.editCateForm = {\n                    cat_name: '' // 提示修改成功\n\n                  };\n\n                  _this2.$message.success('更新分类成功！'); // 刷新数据列表\n\n\n                  _this2.getCateList(); // 关闭对话框\n\n\n                  _this2.editCateDialogVisible = false;\n\n                case 12:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x3) {\n          return _ref6.apply(this, arguments);\n        };\n      }());\n    },\n    // 根据id 删除对应的产品分类\n    removeCate: function () {\n      var _removeCate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(id) {\n        var _ref8, res;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  type: 'warning'\n                });\n\n              case 3:\n                _context6.next = 5;\n                return this.$http.delete('categories/' + id);\n\n              case 5:\n                _ref8 = _context6.sent;\n                res = _ref8.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", this.$message.error('删除用户失败！'));\n\n              case 9:\n                // 刷新数据列表\n                this.getCateList();\n                this.$message.success('删除用户成功！');\n                _context6.next = 16;\n                break;\n\n              case 13:\n                _context6.prev = 13;\n                _context6.t0 = _context6[\"catch\"](0);\n                this.$message.info('已经撤销删除');\n\n              case 16:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 13]]);\n      }));\n\n      function removeCate(_x4) {\n        return _removeCate.apply(this, arguments);\n      }\n\n      return removeCate;\n    }()\n  }\n};",{"version":3,"sources":["Cate.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"cate\">\n    <!-- 面包屑导航区域 -->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\n      <el-breadcrumb-item>商品分类</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!-- 卡片视图区域 -->\n    <el-card>\n      <el-row>\n        <el-col>\n          <el-button type=\"primary\" @click=\"showAddCateDialog\">添加分类</el-button>\n        </el-col>\n      </el-row>\n\n      <!-- 表格 -->\n      <tree-table\n        class=\"treeTable\"\n        :data=\"catelist\"\n        :columns=\"columns\"\n        :selection-type=\"false\"\n        :expand-type=\"false\"\n        show-index\n        index-text=\"#\"\n        border\n        :show-row-hover=\"false\"\n      >\n        <!-- 是否有效 -->\n        <template slot=\"isok\" slot-scope=\"scope\">\n          <i\n            class=\"el-icon-success\"\n            v-if=\"scope.row.cat_deleted === false\"\n            style=\"color: lightgreen;\"\n          ></i>\n          <i class=\"el-icon-error\" v-else style=\"color: red;\"></i>\n        </template>\n\n        <!-- 排序 -->\n        <template slot=\"order\" slot-scope=\"scope\">\n          <el-tag size=\"mini\" v-if=\"scope.row.cat_level===0\">一级</el-tag>\n          <el-tag type=\"success\" size=\"mini\" v-else-if=\"scope.row.cat_level===1\">二级</el-tag>\n          <el-tag type=\"warning\" size=\"mini\" v-else>三级</el-tag>\n        </template>\n\n        <!-- 操作 -->\n        <template slot=\"opt\" slot-scope=\"scope\">\n          <el-button\n            type=\"primary\"\n            icon=\"el-icon-edit\"\n            size=\"mini\"\n            @click=\"showEditCateDialog(scope.row.cat_id)\"\n          >编辑</el-button>\n          <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeCate(scope.row.cat_id)\">删除</el-button>\n        </template>\n      </tree-table>\n\n      <!-- 分页区域 -->\n      <el-pagination\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n        :current-page=\"querInfo.pagenum\"\n        :page-sizes=\"[3, 5, 10, 15]\"\n        :page-size=\"querInfo.pagesize\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"total\"\n      ></el-pagination>\n    </el-card>\n\n    <!-- 添加分类的对话框 -->\n    <el-dialog\n      title=\"添加分类\"\n      :visible.sync=\"addCateDialogVisible\"\n      width=\"50%\"\n      @close=\"addCateDialogClosed\"\n    >\n      <!-- 添加分类的表单 -->\n      <el-form\n        :model=\"addCateForm\"\n        :rules=\"addCateFormRules\"\n        ref=\"addCateFormRef\"\n        label-width=\"100px\"\n      >\n        <el-form-item label=\"分类名称：\" prop=\"cat_name\">\n          <el-input v-model=\"addCateForm.cat_name\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"父级分类：\">\n          <!-- options 用来指定数据源 -->\n          <!-- props 用来指定配置对象 -->\n          <el-cascader\n            expand-trigger=\"hover\"\n            :options=\"parentCateList\"\n            :props=\"cascaderProps\"\n            v-model=\"selectedKeys\"\n            @change=\"parentCateChanged\"\n            clearable\n            change-on-select\n          ></el-cascader>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"addCateDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addCate\">确 定</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 编辑对话框 -->\n    <!-- 添加分类的对话框 -->\n    <el-dialog\n      title=\"修改分类\"\n      :visible.sync=\"editCateDialogVisible\"\n      width=\"50%\"\n      @close=\"editCateDialogClosed\"\n    >\n      <!-- 添加分类的表单 -->\n      <el-form\n        :model=\"editCateForm\"\n        :rules=\"editCateFormRules\"\n        ref=\"editCateFormRef\"\n        label-width=\"100px\"\n      >\n        <el-form-item label=\"分类名称：\" prop=\"cat_name\">\n          <el-input v-model=\"editCateForm.cat_name\"></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editCateDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"editCate\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n<script>\nexport default {\n  data: () => ({\n    // 查询条件\n    querInfo: {\n      type: 3,\n      pagenum: 1,\n      pagesize: 5\n    },\n    // 商品分类的数据列表，默认为空\n    catelist: [],\n    // 总数据条数\n    total: 0,\n\n    // 为table指定列的定义\n    columns: [\n      {\n        label: '分类名称',\n        prop: 'cat_name'\n      },\n      {\n        label: '是否有效',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'isok'\n      },\n      {\n        label: '排序',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'order'\n      },\n      {\n        label: '操作',\n        // 表示，将当前列定义为模板列\n        type: 'template',\n        // 表示当前这一列使用模板名称\n        template: 'opt'\n      }\n    ],\n    // 控制添加分类对话框的显示与隐藏\n    addCateDialogVisible: false,\n    // 添加分类的表单数据对象\n    addCateForm: {\n      // 将要添加的分类的名称\n      cat_name: '',\n      // 父级分类的Id\n      cat_pid: 0,\n      // 分类的等级，默认要添加的是1级分类\n      cat_level: 0\n    },\n\n    addCateFormRules: {\n      cat_name: [{ required: true, message: '请输入分类名称', trigger: 'blur' }]\n    },\n    // 父级分类的列表\n    parentCateList: [],\n    // 指定级联选择器的配置对象\n    cascaderProps: {\n      value: 'cat_id',\n      label: 'cat_name',\n      children: 'children'\n    },\n    // 选中的父级分类的Id数组\n    selectedKeys: [],\n    // 编辑对话框的显示与隐藏\n    editCateDialogVisible: false,\n    // 修改表单数据对象\n    editCateForm: {},\n    // 修改标表单的验证规则\n    editCateFormRules: {\n      cat_name: [{ required: true, message: '请输入分类名称', trigger: 'blur' }]\n    }\n  }),\n  created() {\n    this.getCateList()\n  },\n  methods: {\n    // 获取商品分类数据\n    async getCateList() {\n      const {\n        data: { data, meta }\n      } = await this.$http.get('categories', {\n        params: this.querInfo\n      })\n\n      if (meta.status !== 200) {\n        return this.$message.error('获取商品分类失败！')\n      }\n\n      console.log(data)\n      // 把数据列表，赋值给 catelist\n      this.catelist = data.result\n      // 为总数据条数赋值\n      this.total = data.total\n    },\n    // 监听 pagesize 改变\n    handleSizeChange(newSize) {\n      this.querInfo.pagesize = newSize\n      this.getCateList()\n    },\n    // 监听 pagenum 改变\n    handleCurrentChange(newPage) {\n      this.querInfo.pagenum = newPage\n      this.getCateList()\n    },\n    // 点击按钮，展示添加分类的对话框\n    showAddCateDialog() {\n      // 先获取父级分类的数据列表\n      this.getParentCateList()\n      // 再展示出对话框\n      this.addCateDialogVisible = true\n    },\n    // 获取父级分类的数据列表\n    async getParentCateList() {\n      const { data: res } = await this.$http.get('categories', {\n        params: { type: 2 }\n      })\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取父级分类数据失败！')\n      }\n      console.log(res.data)\n      this.parentCateList = res.data\n    },\n    // 选择项发生变化触发这个函数\n    parentCateChanged() {\n      console.log(this.selectedKeys)\n      // 如果 selectedKeys 数组中的 length 大于0，证明选中的父级分类\n      // 反之，就说明没有选中任何父级分类\n      if (this.selectedKeys.length > 0) {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = this.selectedKeys[\n          this.selectedKeys.length - 1\n        ]\n        // 为当前分类的等级赋值\n        this.addCateForm.cat_level = this.selectedKeys.length\n        return\n      } else {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = 0\n        // 为当前分类的等级赋值\n        this.addCateForm.cat_level = 0\n      }\n    },\n    // 点击按钮，添加新的分类\n    addCate() {\n      this.$refs.addCateFormRef.validate(async valid => {\n        if (!valid) return\n        const { data: res } = await this.$http.post(\n          'categories',\n          this.addCateForm\n        )\n\n        if (res.meta.status !== 201) {\n          return this.$message.error('添加分类失败！')\n        }\n\n        this.$message.success('添加分类成功！')\n        this.getCateList()\n        this.addCateDialogVisible = false\n      })\n    },\n    // 监听对话框的关闭事件，重置表单数据\n    addCateDialogClosed() {\n      this.$refs.addCateFormRef.resetFields()\n      this.selectedKeys = []\n      this.addCateForm.cat_level = 0\n      this.addCateForm.cat_pid = 0\n    },\n    //点击编辑按钮修改对话框内容\n    async showEditCateDialog(id) {\n      // 编辑当前参数的id\n      this.id=id\n      const { data: res } = await this.$http.get(`categories/${id}`)\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取参数信息失败！')\n      }\n      this.editCateForm = res.data\n      this.editCateDialogVisible = true\n    },\n    // 重置修改的表单\n    editCateDialogClosed() {\n      this.$refs.editCateFormRef.resetFields()\n    },\n  editCate() {\n      this.$refs.editCateFormRef.validate(async valid => {\n        if (!valid) return\n        // console.log(this)\n        // debugger\n        // 发起修改用户信息的数据请求\n        const { data: res } =await this.$http.put('categories/'+this.editCateForm.cat_id,this.editCateForm)        \n        // debugger\n        if (res.meta.status !== 200) return this.$message.error('更新分类失败！')\n        this.editCateForm={\n          cat_name:''\n        }\n        // 提示修改成功\n        this.$message.success('更新分类成功！')\n         // 刷新数据列表\n        this.getCateList()\n        // 关闭对话框\n        this.editCateDialogVisible = false\n      })\n    },\n      // 根据id 删除对应的产品分类\n    async  removeCate(id){\n         try {\n        // 如果用户确认删除，则返回值为字符串 confirm\n        // 如果用户取消了删除，则返回值为字符串 cancel\n        // console.log(confirmResult)\n        await this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        })\n        const { data: res } = await this.$http.delete('categories/' + id)\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('删除用户失败！')\n        }\n         // 刷新数据列表\n        this.getCateList()\n        \n        this.$message.success('删除用户成功！')\n       \n      } catch (err) {\n        this.$message.info('已经撤销删除')\n      }\n      }\n  }\n}\n</script lang=\"less\"scoped>\n<style >\n.treeTable {\n  margin-top: 15px;\n}\n\n.el-cascader {\n  width: 100%;\n}\n</style>"],"sourceRoot":"src/components/goods"}]}