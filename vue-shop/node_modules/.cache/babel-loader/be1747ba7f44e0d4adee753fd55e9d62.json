{"remainingRequest":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/babel-loader/lib/index.js!/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/src/components/params/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/src/components/params/index.vue","mtime":1563983651001},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/cache-loader/dist/cjs.js","mtime":1564022614767},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/babel-loader/lib/index.js","mtime":1564022599683},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/cache-loader/dist/cjs.js","mtime":1564022614767},{"path":"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/vue-loader/lib/index.js","mtime":1564022615698}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/macbookproxiaokai/Desktop/Desktop/vue-shop/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      // 商品分类列表\n      catelist: [],\n      // 级联选择框的配置对象\n      cateProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children'\n      },\n      // 级联选择框双向绑定到的数组\n      selectedCateKeys: [],\n      // 被激活的页签的名称\n      activeName: 'many',\n      // 动态参数的数据\n      manyTableData: [],\n      // 静态属性的数据\n      onlyTableData: [],\n      // 控制添加对话框的显示与隐藏\n      addDialogVisible: false,\n      // 添加参数的表单数据对象\n      addForm: {\n        attr_name: ''\n      },\n      // 添加表单的验证规则对象\n      addFormRules: {\n        attr_name: [{\n          required: true,\n          message: '请输入参数名称',\n          trigger: 'blur'\n        }]\n      },\n      // 控制修改对话框的显示与隐藏\n      editDialogVisible: false,\n      // 修改的表单数据对象\n      editForm: {},\n      // 修改表单的验证规则对象\n      editFormRules: {\n        attr_name: [{\n          required: true,\n          message: '请输入参数名称',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getCateList();\n  },\n  methods: {\n    // 获取所有的商品分类列表\n    getCateList: function () {\n      var _getCateList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _ref, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.$http.get('categories');\n\n              case 2:\n                _ref = _context.sent;\n                res = _ref.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.$message.error('获取商品分类失败！'));\n\n              case 6:\n                this.catelist = res.data;\n                console.log(this.catelist);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCateList() {\n        return _getCateList.apply(this, arguments);\n      }\n\n      return getCateList;\n    }(),\n    // 级联选择框选中项变化，会触发这个函数\n    handleChange: function handleChange() {\n      this.getParamsData();\n    },\n    // tab 页签点击事件的处理函数\n    handleTabClick: function handleTabClick() {\n      console.log(this.activeName);\n      this.getParamsData();\n    },\n    // 获取参数的列表数据\n    getParamsData: function () {\n      var _getParamsData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _ref2, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.selectedCateKeys.length !== 3)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                this.selectedCateKeys = [];\n                this.manyTableData = [];\n                this.onlyTableData = [];\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                // 证明选中的是三级分类\n                console.log(this.selectedCateKeys); // 根据所选分类的Id，和当前所处的面板，获取对应的参数\n\n                _context2.next = 8;\n                return this.$http.get(\"categories/\".concat(this.cateId, \"/attributes\"), {\n                  params: {\n                    sel: this.activeName\n                  }\n                });\n\n              case 8:\n                _ref2 = _context2.sent;\n                res = _ref2.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.$message.error('获取参数列表失败！'));\n\n              case 12:\n                res.data.forEach(function (item) {\n                  item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : []; // 控制文本框的显示与隐藏\n\n                  item.inputVisible = false; // 文本框中输入的值\n\n                  item.inputValue = '';\n                });\n                console.log(res.data);\n\n                if (this.activeName === 'many') {\n                  this.manyTableData = res.data;\n                } else {\n                  this.onlyTableData = res.data;\n                }\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getParamsData() {\n        return _getParamsData.apply(this, arguments);\n      }\n\n      return getParamsData;\n    }(),\n    // 监听添加对话框的关闭事件\n    addDialogClosed: function addDialogClosed() {\n      this.$refs.addFormRef.resetFields();\n    },\n    // 点击按钮，添加参数\n    addParams: function addParams() {\n      var _this = this;\n\n      this.$refs.addFormRef.validate(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(valid) {\n          var _ref4, res;\n\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (valid) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 2:\n                  _context3.next = 4;\n                  return _this.$http.post(\"categories/\".concat(_this.cateId, \"/attributes\"), {\n                    attr_name: _this.addForm.attr_name,\n                    attr_sel: _this.activeName\n                  });\n\n                case 4:\n                  _ref4 = _context3.sent;\n                  res = _ref4.data;\n\n                  if (!(res.meta.status !== 201)) {\n                    _context3.next = 8;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\", _this.$message.error('添加参数失败！'));\n\n                case 8:\n                  _this.$message.success('添加参数成功！');\n\n                  _this.addDialogVisible = false;\n\n                  _this.getParamsData();\n\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    },\n    // 点击按钮，展示修改的对话框\n    showEditDialog: function () {\n      var _showEditDialog = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(attr_id) {\n        var _ref5, res;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.$http.get(\"categories/\".concat(this.cateId, \"/attributes/\").concat(attr_id), {\n                  params: {\n                    attr_sel: this.activeName\n                  }\n                });\n\n              case 2:\n                _ref5 = _context4.sent;\n                res = _ref5.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", this.$message.error('获取参数信息失败！'));\n\n              case 6:\n                this.editForm = res.data;\n                this.editDialogVisible = true;\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function showEditDialog(_x2) {\n        return _showEditDialog.apply(this, arguments);\n      }\n\n      return showEditDialog;\n    }(),\n    // 重置修改的表单\n    editDialogClosed: function editDialogClosed() {\n      this.$refs.editFormRef.resetFields();\n    },\n    // 点击按钮，修改参数信息\n    editParams: function editParams() {\n      var _this2 = this;\n\n      this.$refs.editFormRef.validate(\n      /*#__PURE__*/\n      function () {\n        var _ref6 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee5(valid) {\n          var _ref7, res;\n\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (valid) {\n                    _context5.next = 2;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\");\n\n                case 2:\n                  _context5.next = 4;\n                  return _this2.$http.put(\"categories/\".concat(_this2.cateId, \"/attributes/\").concat(_this2.editForm.attr_id), {\n                    attr_name: _this2.editForm.attr_name,\n                    attr_sel: _this2.activeName\n                  });\n\n                case 4:\n                  _ref7 = _context5.sent;\n                  res = _ref7.data;\n\n                  if (!(res.meta.status !== 200)) {\n                    _context5.next = 8;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\", _this2.$message.error('修改参数失败！'));\n\n                case 8:\n                  _this2.$message.success('修改参数成功！');\n\n                  _this2.getParamsData();\n\n                  _this2.editDialogVisible = false;\n\n                case 11:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x3) {\n          return _ref6.apply(this, arguments);\n        };\n      }());\n    },\n    // 根据Id删除对应的参数项\n    removeParams: function () {\n      var _removeParams = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(attr_id) {\n        var confirmResult, _ref8, res;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.$confirm('此操作将永久删除该参数, 是否继续?', '提示', {\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  type: 'warning'\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                confirmResult = _context6.sent;\n\n                if (!(confirmResult !== 'confirm')) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", this.$message.info('已取消删除！'));\n\n              case 5:\n                _context6.next = 7;\n                return this.$http.delete(\"categories/\".concat(this.cateId, \"/attributes/\").concat(attr_id));\n\n              case 7:\n                _ref8 = _context6.sent;\n                res = _ref8.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", this.$message.error('删除参数失败！'));\n\n              case 11:\n                this.$message.success('删除参数成功！');\n                this.getParamsData();\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function removeParams(_x4) {\n        return _removeParams.apply(this, arguments);\n      }\n\n      return removeParams;\n    }(),\n    // 文本框失去焦点，或摁下了 Enter 都会触发\n    handleInputConfirm: function () {\n      var _handleInputConfirm = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(row) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(row.inputValue.trim().length === 0)) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                row.inputValue = '';\n                row.inputVisible = false;\n                return _context7.abrupt(\"return\");\n\n              case 4:\n                // 如果没有return，则证明输入的内容，需要做后续处理\n                row.attr_vals.push(row.inputValue.trim());\n                row.inputValue = '';\n                row.inputVisible = false; // 需要发起请求，保存这次操作\n\n                this.saveAttrVals(row);\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function handleInputConfirm(_x5) {\n        return _handleInputConfirm.apply(this, arguments);\n      }\n\n      return handleInputConfirm;\n    }(),\n    // 将对 attr_vals 的操作，保存到数据库\n    saveAttrVals: function () {\n      var _saveAttrVals = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8(row) {\n        var _ref9, res;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.$http.put(\"categories/\".concat(this.cateId, \"/attributes/\").concat(row.attr_id), {\n                  attr_name: row.attr_name,\n                  attr_sel: row.attr_sel,\n                  attr_vals: row.attr_vals.join(' ')\n                });\n\n              case 2:\n                _ref9 = _context8.sent;\n                res = _ref9.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context8.next = 6;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", this.$message.error('修改参数项失败！'));\n\n              case 6:\n                this.$message.success('修改参数项成功！');\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function saveAttrVals(_x6) {\n        return _saveAttrVals.apply(this, arguments);\n      }\n\n      return saveAttrVals;\n    }(),\n    // 点击按钮，展示文本输入框\n    showInput: function showInput(row) {\n      var _this3 = this;\n\n      row.inputVisible = true; // 让文本框自动获得焦点\n      // $nextTick 方法的作用，就是当页面上元素被重新渲染之后，才会指定回调函数中的代码\n\n      this.$nextTick(function (_) {\n        _this3.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n    // 删除对应的参数可选项\n    handleClose: function handleClose(i, row) {\n      row.attr_vals.splice(i, 1);\n      this.saveAttrVals(row);\n    }\n  },\n  computed: {\n    // 如果按钮需要被禁用，则返回true，否则返回false\n    isBtnDisabled: function isBtnDisabled() {\n      if (this.selectedCateKeys.length !== 3) {\n        return true;\n      }\n\n      return false;\n    },\n    // 当前选中的三级分类的Id\n    cateId: function cateId() {\n      if (this.selectedCateKeys.length === 3) {\n        return this.selectedCateKeys[2];\n      }\n\n      return null;\n    },\n    // 动态计算标题的文本\n    titleText: function titleText() {\n      if (this.activeName === 'many') {\n        return '动态参数';\n      }\n\n      return '静态属性';\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <!-- 面包屑导航区域 -->\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\n      <el-breadcrumb-item>参数列表</el-breadcrumb-item>\n    </el-breadcrumb>\n\n    <!-- 卡片视图区域 -->\n    <el-card>\n      <!-- 警告区域 -->\n      <el-alert show-icon title=\"注意：只允许为第三级分类设置相关参数！\" type=\"warning\" :closable=\"false\"></el-alert>\n\n      <!-- 选择商品分类区域 -->\n      <el-row class=\"cat_opt\">\n        <el-col>\n          <span>选择商品分类：</span>\n          <!-- 选择商品分类的级联选择框 -->\n          <el-cascader expand-trigger=\"hover\" :options=\"catelist\" :props=\"cateProps\" v-model=\"selectedCateKeys\" @change=\"handleChange\">\n          </el-cascader>\n        </el-col>\n      </el-row>\n\n      <!-- tab 页签区域 -->\n      <el-tabs v-model=\"activeName\" @tab-click=\"handleTabClick\">\n        <!-- 添加动态参数的面板 -->\n        <el-tab-pane label=\"动态参数\" name=\"many\">\n          <!-- 添加参数的按钮 -->\n          <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\" @click=\"addDialogVisible=true\">添加参数</el-button>\n          <!-- 动态参数表格 -->\n          <el-table :data=\"manyTableData\" border stripe>\n            <!-- 展开行 -->\n            <el-table-column type=\"expand\">\n              <template slot-scope=\"scope\">\n                <!-- 循环渲染Tag标签 -->\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{item}}</el-tag>\n                <!-- 输入的文本框 -->\n                <el-input class=\"input-new-tag\" v-if=\"scope.row.inputVisible\" v-model=\"scope.row.inputValue\" ref=\"saveTagInput\" size=\"small\" @keyup.enter.native=\"handleInputConfirm(scope.row)\" @blur=\"handleInputConfirm(scope.row)\">\n                </el-input>\n                <!-- 添加按钮 -->\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag</el-button>\n              </template>\n            </el-table-column>\n            <!-- 索引列 -->\n            <el-table-column type=\"index\"></el-table-column>\n            <el-table-column label=\"参数名称\" prop=\"attr_name\"></el-table-column>\n            <el-table-column label=\"操作\">\n              <template slot-scope=\"scope\">\n                <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-edit\" @click=\"showEditDialog(scope.row.attr_id)\">编辑</el-button>\n                <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n        <!-- 添加静态属性的面板 -->\n        <el-tab-pane label=\"静态属性\" name=\"only\">\n          <!-- 添加属性的按钮 -->\n          <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\" @click=\"addDialogVisible=true\">添加属性</el-button>\n          <!-- 静态属性表格 -->\n          <el-table :data=\"onlyTableData\" border stripe>\n            <!-- 展开行 -->\n            <el-table-column type=\"expand\">\n              <template slot-scope=\"scope\">\n                <!-- 循环渲染Tag标签 -->\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{item}}</el-tag>\n                <!-- 输入的文本框 -->\n                <el-input class=\"input-new-tag\" v-if=\"scope.row.inputVisible\" v-model=\"scope.row.inputValue\" ref=\"saveTagInput\" size=\"small\" @keyup.enter.native=\"handleInputConfirm(scope.row)\" @blur=\"handleInputConfirm(scope.row)\">\n                </el-input>\n                <!-- 添加按钮 -->\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag</el-button>\n              </template>\n            </el-table-column>\n            <!-- 索引列 -->\n            <el-table-column type=\"index\"></el-table-column>\n            <el-table-column label=\"属性名称\" prop=\"attr_name\"></el-table-column>\n            <el-table-column label=\"操作\">\n              <template slot-scope=\"scope\">\n                <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-edit\" @click=\"showEditDialog(scope.row.attr_id)\">编辑</el-button>\n                <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n        </el-tab-pane>\n      </el-tabs>\n    </el-card>\n\n    <!-- 添加参数的对话框 -->\n    <el-dialog :title=\"'添加' + titleText\" :visible.sync=\"addDialogVisible\" width=\"50%\" @close=\"addDialogClosed\">\n      <!-- 添加参数的对话框 -->\n      <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"100px\">\n        <el-form-item :label=\"titleText\" prop=\"attr_name\">\n          <el-input v-model=\"addForm.attr_name\"></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"addDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"addParams\">确 定</el-button>\n      </span>\n    </el-dialog>\n\n    <!-- 修改参数的对话框 -->\n    <el-dialog :title=\"'修改' + titleText\" :visible.sync=\"editDialogVisible\" width=\"50%\" @close=\"editDialogClosed\">\n      <!-- 添加参数的对话框 -->\n      <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editFormRef\" label-width=\"100px\">\n        <el-form-item :label=\"titleText\" prop=\"attr_name\">\n          <el-input v-model=\"editForm.attr_name\"></el-input>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"editParams\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      // 商品分类列表\n      catelist: [],\n      // 级联选择框的配置对象\n      cateProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children'\n      },\n      // 级联选择框双向绑定到的数组\n      selectedCateKeys: [],\n      // 被激活的页签的名称\n      activeName: 'many',\n      // 动态参数的数据\n      manyTableData: [],\n      // 静态属性的数据\n      onlyTableData: [],\n      // 控制添加对话框的显示与隐藏\n      addDialogVisible: false,\n      // 添加参数的表单数据对象\n      addForm: {\n        attr_name: ''\n      },\n      // 添加表单的验证规则对象\n      addFormRules: {\n        attr_name: [\n          { required: true, message: '请输入参数名称', trigger: 'blur' }\n        ]\n      },\n      // 控制修改对话框的显示与隐藏\n      editDialogVisible: false,\n      // 修改的表单数据对象\n      editForm: {},\n      // 修改表单的验证规则对象\n      editFormRules: {\n        attr_name: [\n          { required: true, message: '请输入参数名称', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  created() {\n    this.getCateList()\n  },\n  methods: {\n    // 获取所有的商品分类列表\n    async getCateList() {\n      const { data: res } = await this.$http.get('categories')\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取商品分类失败！')\n      }\n\n      this.catelist = res.data\n\n      console.log(this.catelist)\n    },\n    // 级联选择框选中项变化，会触发这个函数\n    handleChange() {\n      this.getParamsData()\n    },\n    // tab 页签点击事件的处理函数\n    handleTabClick() {\n      console.log(this.activeName)\n      this.getParamsData()\n    },\n    // 获取参数的列表数据\n    async getParamsData() {\n      // 证明选中的不是三级分类\n      if (this.selectedCateKeys.length !== 3) {\n        this.selectedCateKeys = []\n        this.manyTableData = []\n        this.onlyTableData = []\n        return\n      }\n\n      // 证明选中的是三级分类\n      console.log(this.selectedCateKeys)\n      // 根据所选分类的Id，和当前所处的面板，获取对应的参数\n      const { data: res } = await this.$http.get(\n        `categories/${this.cateId}/attributes`,\n        {\n          params: { sel: this.activeName }\n        }\n      )\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取参数列表失败！')\n      }\n\n      res.data.forEach(item => {\n        item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : []\n        // 控制文本框的显示与隐藏\n        item.inputVisible = false\n        // 文本框中输入的值\n        item.inputValue = ''\n      })\n\n      console.log(res.data)\n      if (this.activeName === 'many') {\n        this.manyTableData = res.data\n      } else {\n        this.onlyTableData = res.data\n      }\n    },\n    // 监听添加对话框的关闭事件\n    addDialogClosed() {\n      this.$refs.addFormRef.resetFields()\n    },\n    // 点击按钮，添加参数\n    addParams() {\n      this.$refs.addFormRef.validate(async valid => {\n        if (!valid) return\n        const { data: res } = await this.$http.post(\n          `categories/${this.cateId}/attributes`,\n          {\n            attr_name: this.addForm.attr_name,\n            attr_sel: this.activeName\n          }\n        )\n\n        if (res.meta.status !== 201) {\n          return this.$message.error('添加参数失败！')\n        }\n\n        this.$message.success('添加参数成功！')\n        this.addDialogVisible = false\n        this.getParamsData()\n      })\n    },\n    // 点击按钮，展示修改的对话框\n    async showEditDialog(attr_id) {\n      // 查询当前参数的信息\n      const { data: res } = await this.$http.get(\n        `categories/${this.cateId}/attributes/${attr_id}`,\n        {\n          params: { attr_sel: this.activeName }\n        }\n      )\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('获取参数信息失败！')\n      }\n\n      this.editForm = res.data\n      this.editDialogVisible = true\n    },\n    // 重置修改的表单\n    editDialogClosed() {\n      this.$refs.editFormRef.resetFields()\n    },\n    // 点击按钮，修改参数信息\n    editParams() {\n      this.$refs.editFormRef.validate(async valid => {\n        if (!valid) return\n        const { data: res } = await this.$http.put(\n          `categories/${this.cateId}/attributes/${this.editForm.attr_id}`,\n          { attr_name: this.editForm.attr_name, attr_sel: this.activeName }\n        )\n\n        if (res.meta.status !== 200) {\n          return this.$message.error('修改参数失败！')\n        }\n\n        this.$message.success('修改参数成功！')\n        this.getParamsData()\n        this.editDialogVisible = false\n      })\n    },\n    // 根据Id删除对应的参数项\n    async removeParams(attr_id) {\n      const confirmResult = await this.$confirm(\n        '此操作将永久删除该参数, 是否继续?',\n        '提示',\n        {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }\n      ).catch(err => err)\n\n      // 用户取消了删除的操作\n      if (confirmResult !== 'confirm') {\n        return this.$message.info('已取消删除！')\n      }\n\n      // 删除的业务逻辑\n      const { data: res } = await this.$http.delete(\n        `categories/${this.cateId}/attributes/${attr_id}`\n      )\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('删除参数失败！')\n      }\n\n      this.$message.success('删除参数成功！')\n      this.getParamsData()\n    },\n    // 文本框失去焦点，或摁下了 Enter 都会触发\n    async handleInputConfirm(row) {\n      if (row.inputValue.trim().length === 0) {\n        row.inputValue = ''\n        row.inputVisible = false\n        return\n      }\n      // 如果没有return，则证明输入的内容，需要做后续处理\n      row.attr_vals.push(row.inputValue.trim())\n      row.inputValue = ''\n      row.inputVisible = false\n      // 需要发起请求，保存这次操作\n      this.saveAttrVals(row)\n    },\n    // 将对 attr_vals 的操作，保存到数据库\n    async saveAttrVals(row) {\n      // 需要发起请求，保存这次操作\n      const { data: res } = await this.$http.put(\n        `categories/${this.cateId}/attributes/${row.attr_id}`,\n        {\n          attr_name: row.attr_name,\n          attr_sel: row.attr_sel,\n          attr_vals: row.attr_vals.join(' ')\n        }\n      )\n\n      if (res.meta.status !== 200) {\n        return this.$message.error('修改参数项失败！')\n      }\n\n      this.$message.success('修改参数项成功！')\n    },\n    // 点击按钮，展示文本输入框\n    showInput(row) {\n      row.inputVisible = true\n      // 让文本框自动获得焦点\n      // $nextTick 方法的作用，就是当页面上元素被重新渲染之后，才会指定回调函数中的代码\n      this.$nextTick(_ => {\n        this.$refs.saveTagInput.$refs.input.focus()\n      })\n    },\n    // 删除对应的参数可选项\n    handleClose(i, row) {\n      row.attr_vals.splice(i, 1)\n      this.saveAttrVals(row)\n    }\n  },\n  computed: {\n    // 如果按钮需要被禁用，则返回true，否则返回false\n    isBtnDisabled() {\n      if (this.selectedCateKeys.length !== 3) {\n        return true\n      }\n      return false\n    },\n    // 当前选中的三级分类的Id\n    cateId() {\n      if (this.selectedCateKeys.length === 3) {\n        return this.selectedCateKeys[2]\n      }\n      return null\n    },\n    // 动态计算标题的文本\n    titleText() {\n      if (this.activeName === 'many') {\n        return '动态参数'\n      }\n      return '静态属性'\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.cat_opt {\n  margin: 15px 0;\n}\n\n.el-tag {\n  margin: 10px;\n}\n\n.input-new-tag {\n  width: 120px;\n}\n</style>\n"],"sourceRoot":"src/components/params"}]}